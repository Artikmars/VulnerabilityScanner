package com.artamonov.vulnerabilityscanner;

import android.annotation.TargetApi;
import android.app.Activity;
import android.app.usage.UsageStats;
import android.app.usage.UsageStatsManager;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.VersionedPackage;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.preference.PreferenceManager;
import android.provider.Settings;
import android.support.annotation.RequiresApi;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.ListView;
import android.widget.Toast;

import java.sql.SQLOutput;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import static android.support.v4.content.ContextCompat.startActivity;


public class MainActivity extends AppCompatActivity implements SharedPreferences.OnSharedPreferenceChangeListener {


    private static final String TAG = "myLogs";

    public List<AppList> installedApps = new ArrayList<>();
    public List<UsageStats> mListUsageStats;
    public long lastTimeExecuted;
    public Button webButton;
    // public String url;
    String lastRunTime;
    public static String url = "https://www.google.com/search?q=";
    public static String urlGoogle = " vulnerabilities android";

    @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP_MR1)
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        Log.d(TAG, "onCreate");
        Log.i(TAG, "onCreate");
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        webButton = findViewById(R.id.list_web_button);

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP_MR1) {
            checkAppUsages();
        }
        ListView userInstalledApps = findViewById(R.id.installed_app_list);

        installedApps = getInstalledApps();
        AppAdapter installedAppAdapter = new AppAdapter(MainActivity.this, installedApps);
        userInstalledApps.setAdapter(installedAppAdapter);
        //Toast.makeText(getApplicationContext(), "url: " + url, Toast.LENGTH_LONG).show();
        setupSharedPreferences();
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        PreferenceManager.getDefaultSharedPreferences(this)
                .unregisterOnSharedPreferenceChangeListener(this);
    }

    private void setupSharedPreferences() {

        SharedPreferences sharedPreferences = android.support.v7.preference.PreferenceManager
                .getDefaultSharedPreferences(this);
        loadSourceFromPreferences(sharedPreferences);
        sharedPreferences.registerOnSharedPreferenceChangeListener(this);


    }

    public void setLink(String source) {

        if (source.equals(getString(R.string.pref_white_list_value_google))) {
            url = "https://www.google.com/search?q=";
            urlGoogle = " vulnerabilities android";
        } else if (source.equals(getString(R.string.pref_white_list_value_cvedetails))) {
            url = "https://www.cvedetails.com/google-search-results.php?q=";
        } else if (source.equals(getString(R.string.pref_white_list_value_checkpoint))) {
            url = "http://search.us.checkpoint.com/tmpl/Search?action=search&view=cp_search&reset=t&num=10&start=0&q=";
        } else if (source.equals(getString(R.string.pref_white_list_value_helpnetsecurity))) {
            url = "https://www.helpnetsecurity.com/?s=";
        }

    }
   /* private void setupSharedPreferences() {
        // Get all of the values from shared preferences to set it up
        SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(this);
        mVisualizerView.setShowBass(sharedPreferences.getBoolean(getString(R.string.pref_show_bass_key),
                getResources().getBoolean(R.bool.pref_show_bass_default)));
        mVisualizerView.setShowMid(sharedPreferences.getBoolean(getString(R.string.pref_show_mid_range_key),
                getResources().getBoolean(R.bool.pref_show_mid_range_default)));
        mVisualizerView.setShowTreble(sharedPreferences.getBoolean(getString(R.string.pref_show_treble_key),
                getResources().getBoolean(R.bool.pref_show_treble_default)));
        mVisualizerView.setMinSizeScale(1);
        loadColorFromPreferences(sharedPreferences);
        // Register the listener
        sharedPreferences.registerOnSharedPreferenceChangeListener(this);
    }*/


    @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)
    private void checkAppUsages() {

        /** @param time = current time
         *  @param delta = initial period
         *  @param interval = time - delta
         *
         */
        long time = System.currentTimeMillis();
        long delta = 1000 * 60 * 60 * 24 * 24;
        UsageStatsManager usageStatsManager = (UsageStatsManager) getSystemService(Context.USAGE_STATS_SERVICE);
        mListUsageStats = usageStatsManager.queryUsageStats(UsageStatsManager.INTERVAL_DAILY,
                time - delta, time);
        Intent intent = new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS);
        startActivity(intent);

        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.US);


        for (int i = 0; i < mListUsageStats.size(); i++) {

            // PackageInfo packageInfo = packs.get(i);
            String packageName = mListUsageStats.get(i).getPackageName();
            //String applicationInfoString = null;
            //lastTimeExecuted = Long.parseLong(dateFormat.format(mListUsageStats.get(i).getLastTimeUsed()));
            Log.i("TAG2", "package name: " + packageName);
            Log.i("TAG2", "LastTimeUsed: " + dateFormat.format(mListUsageStats.get(i).getLastTimeUsed()));

            try {
                PackageInfo packageInfo = getPackageManager().getPackageInfo(packageName, 0);
                String versionName = packageInfo.versionName;
                Log.i("TAG2", "version: " + versionName);
                // ApplicationInfo applicationInfo = getApplicationInfo();
                //String appNameTemp = String.valueOf(applicationInfo);
                String appName = (String) getPackageManager().getApplicationLabel(packageInfo.applicationInfo);
                //String appName = applicationInfo.name;
                //String appName = String.valueOf(getApplicationInfo().loadLabel(getPackageManager()));
                if (appName != null) {
                    Log.i("TAG2", "appName: " + appName);
                }
            } catch (PackageManager.NameNotFoundException e) {
                e.printStackTrace();
            }



            /*try {
                ApplicationInfo applicationInfo = getPackageManager().getApplicationInfo(packageName, 0);
                applicationInfoString = applicationInfo.toString();
            } catch (PackageManager.NameNotFoundException e) {
                e.printStackTrace();
            }

            Log.i("TAG2" , "version: " + applicationInfoString);*/


        }
    }


    /*public void goToWeb(String url) {

        Intent i = new Intent(Intent.ACTION_VIEW);

        if (url != null) {
            i.setData(Uri.parse(url));
           // Toast.makeText(getApplication(), "url: " + url, Toast.LENGTH_LONG).show();
        } else {
            Toast.makeText(getApplication(), "url: " + url, Toast.LENGTH_LONG).show();
        }
        startActivity(i);

    }*/


    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.menu_main, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        int id = item.getItemId();
        //noinspection SimplifiableIfStatement
        if (id == R.id.action_settings) {
            Intent i = new Intent(this, SettingsActivity.class);
            startActivity(i);
            return true;
        }
        return super.onOptionsItemSelected(item);
    }

    @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP_MR1)
    private List<AppList> getInstalledApps() {
        Log.i(TAG, "in getInstalledApps");
        List<AppList> res = new ArrayList<>();
        List<PackageInfo> packs = getPackageManager().getInstalledPackages(0);

        Log.i(TAG, ".getInstalledPackages done. Size packs.size(): " + packs.size());

        Calendar c = Calendar.getInstance();
        //c.add(Calendar.HOUR, -1);
        c.add(Calendar.HOUR_OF_DAY, -1);
        long begin = c.getTimeInMillis();
        long end = System.currentTimeMillis();
        // long day = 1000 * 60 * 60 * 24;
        //  long delta = day * 365;
        UsageStatsManager usageStatsManager = (UsageStatsManager) getSystemService(Context.USAGE_STATS_SERVICE);
        mListUsageStats = usageStatsManager.queryUsageStats(UsageStatsManager.INTERVAL_YEARLY,
                begin, end);
        Map<String, UsageStats> mAggregateListUsageStats = usageStatsManager.queryAndAggregateUsageStats(begin, end);
        Log.i(TAG, ".getInstalledPackages done. Size  mListUsageStats.size(): " + mListUsageStats.size());
        Intent intent = new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS);
        startActivity(intent);

        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.US);

        //String applicationInfoString = null;

        // printUsageStats(mListUsageStats, packs, mAggregateListUsageStats);


        for (int i = 0; i < packs.size(); i++) {
            // Log.i(TAG, "in loop packs.size(). Size: " + packs.size());
            PackageInfo p = packs.get(i);
            if ((!isSystemPackage(p))) {

                // String packageNameForUsageStats = mListUsageStats.get(i).getPackageName();
                //  Log.i(TAG, "in loop mListUsageStats.get(i).getPackageName() " + packageNameForUsageStats);
                //   Log.i(TAG, "in loop mListUsageStats - lastTimeExecuted " + lastTimeExecuted);
                String appName = p.applicationInfo.loadLabel(getPackageManager()).toString();
                //  Log.i(TAG, "in loop appName: " + appName);
                String versionName = p.versionName;
                //  Log.i(TAG, "in loop version: " + versionName);
                String lastUpdateTime = "Last Updated: " + currentMilliSecondsToDate(p.lastUpdateTime);
                //  Log.i(TAG, "in loop updated " + lastUpdateTime);

                String packageName = p.packageName;

                for (int k = 0; k < mListUsageStats.size(); k++) {

                    String packageNameForUsageStats = mListUsageStats.get(k).getPackageName();
                    if (packageNameForUsageStats.equals(packageName)) {
                        lastTimeExecuted = mListUsageStats.get(k).getLastTimeUsed();
                        break;
                    } else {
                        lastTimeExecuted = 0;
                    }
                }

                if (lastTimeExecuted != 0) {
                    lastRunTime = "Last Run Time: " + currentMilliSecondsToDate(lastTimeExecuted);
                } else {
                    lastRunTime = "Last Run Time: NO available data";
                }



               /* String tempPackageNamePI = p.packageName;
                String tempPackageNameUS = mListUsageStats.get(i).getPackageName();

               if (tempPackageNamePI.equals(tempPackageNameUS)){
                    int position = mListUsageStats.indexOf(tempPackageNameUS);
                    lastTimeExecuted = mListUsageStats.get(position).getLastTimeUsed();
                } else {

                    lastTimeExecuted = 1;
                }*/


                Drawable icon = p.applicationInfo.loadIcon(getPackageManager());


                res.add(new AppList(appName, versionName, lastUpdateTime, lastRunTime, icon));
            }
        }


       /* for (int k = 0; k < mListUsageStats.size(); k++) {
            Log.d(TAG, "in for loop mListUsageStats");
            String packageNameForUsageStats = mListUsageStats.get(k).getPackageName();
            Log.d(TAG, packageNameForUsageStats);
            lastTimeExecuted = mListUsageStats.get(k).getLastTimeUsed();
            Log.d(TAG, String.valueOf(lastTimeExecuted));
            System.out.println(packageNameForUsageStats);
            System.out.println(lastTimeExecuted);

            String lastRunTime = String.valueOf(lastTimeExecuted);
            if (res.contains(packageNameForUsageStats)) {
                int position = res.indexOf(packageNameForUsageStats);
                res.add(position, new AppList(lastRunTime));


            }

        }*/


        return res;
    }


    @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)
    public static void printUsageStats(List<UsageStats> mListUsageStats, List<PackageInfo> packs,
                                       Map<String, UsageStats> map) {

       /* for (UsageStats u : mListUsageStats) {
            Log.i(TAG, "Package: " + u.getPackageName() + "\t" + "Last Time Used: "
                    + u.getLastTimeUsed());
        }*/
        Log.i(TAG, "USAGESTATS - LIST: ");
        for (UsageStats u : mListUsageStats) {
            Log.i(TAG, "Package: " + u.getPackageName());
        }
        /*Log.i(TAG, "USAGESTATS - MAP: ");
        for (Map.Entry<String, UsageStats> entry : map.entrySet()) {
            Log.i(TAG, "Package: " + entry.getKey() + " / " + entry.getValue());
        }*/

       /* Log.i(TAG, "PACKAGES FROM USAGESTATS: ");
        for (UsageStats u : mListUsageStats) {
            Log.i(TAG, "Package: " + u.getPackageName());
        }
        Log.i(TAG, "PACKAGES FROM PACKAGEINFO: ")*/

      /*  for (int i = 0; i < packs.size(); i++) {
            PackageInfo p = packs.get(i);
            Log.i(TAG, "Package: " + p.packageName);
        }*/
    }

   /* private List<ApplicationInfo> getVersionApps(){
        PackageManager packageManager = getPackageManager();
        List <ApplicationInfo> packageInfos = packageManager.getInstalledApplications(PackageManager.GET_META_DATA);

        return packageInfos;

    }*/


    private boolean isSystemPackage(PackageInfo pkgInfo) {
        return ((pkgInfo.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) != 0);
    }

    private Date currentMilliSecondsToDate(long time) {

        return new Date(time);

    }

    @Override
    public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {
        if (key.equals(getString(R.string.pref_white_list_key))) {
            loadSourceFromPreferences(sharedPreferences);
        }
    }

    private void loadSourceFromPreferences(SharedPreferences sharedPreferences) {
        setLink(sharedPreferences.getString(getString(R.string.pref_white_list_key),
                getString(R.string.pref_white_list_value_google)));
    }
}
