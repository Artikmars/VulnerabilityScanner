package com.artamonov.vulnerabilityscanner;

import android.os.AsyncTask;
import android.os.Build;
import android.os.Looper;
import android.support.annotation.RequiresApi;
import android.util.Log;

import java.io.BufferedOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;


public class SendToServerTask extends AsyncTask<String, String, Void> {
    private static final String TAG = "myLogs";

    private void writeStream(OutputStream out) {

        try {
            out.write(MainActivity.installedAppsString.getBytes());
            out.flush();
        } catch (IOException e) {
            Log.i(TAG, " IOException" + e);
        }

    }

    @RequiresApi(api = Build.VERSION_CODES.KITKAT)
    @Override
    protected Void doInBackground(String ... installedApps) {


        HttpURLConnection urlConnection = null;
        try {
            URL url;
            url = new URL("http://192.168.5.4:80/test");
            urlConnection = (HttpURLConnection) url.openConnection();
            urlConnection.setRequestMethod("POST");
            urlConnection.setRequestProperty("Content-Type",
                    "application/x-www-form-urlencoded");
            urlConnection.setFixedLengthStreamingMode(MainActivity.installedAppsString.length());
            urlConnection.setDoOutput(true);

            OutputStream out = new BufferedOutputStream(urlConnection.getOutputStream());
            writeStream(out);

            urlConnection.connect();
            int statusCode = urlConnection.getResponseCode();
            if (statusCode == HttpURLConnection.HTTP_OK) {
                Log.i(TAG, "  Connection is SUCCESSFUL");
            } else {
                Log.i(TAG, "  Connection is FAILED. " + urlConnection.getResponseMessage() +
                        ". Error Code : " + statusCode);
            }
            Log.i(TAG, "  urlConnection.connect();");

            if (Looper.myLooper() == Looper.getMainLooper()) {
                Log.i(TAG, "Thread in doInBackground Method of AsyncTask: MAIN");
            } else {
                Log.i(TAG, "Thread in doInBackground Method of AsyncTask: NOT MAIN");
            }

            publishProgress(urlConnection.getResponseCode() +
                    ": " + urlConnection.getResponseMessage());
            Log.i(TAG, "  publishProgress");

        } catch (MalformedURLException e) {
            Log.i(TAG, " MalformedURLException" + e);
        } catch (IOException e) {
            Log.i(TAG, " IOException " + e);
        } finally {
            if (urlConnection != null) {
                urlConnection.disconnect();
            }
        }
        return null;
    }


    @Override
    protected void onPostExecute(Void aVoid) {
        super.onPostExecute(aVoid);
    }

    @Override
    protected void onProgressUpdate(String... values) {

        Log.i(TAG, "onProgressUpdate method" + values[0]);
    }
}